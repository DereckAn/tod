# Reusable workflow for CI testing
# This workflow can be called from other workflows to avoid duplication

name: Reusable CI

on:
  workflow_call:
    inputs:
      rust-version:
        description: 'Rust version to use'
        required: false
        default: 'stable'
        type: string

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  CARGO_PROFILE_RELEASE_LTO: true
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    name: Cargo CI Tests
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@nextest

      - name: Install Rust Toolchain
        run: rustup toolchain install ${{ inputs.rust-version }}
      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true

      - name: Cargo Test
        run: cargo nextest run --all-features

  check:
    runs-on: ubuntu-latest
    name: Cargo Check
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ inputs.rust-version }}
      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
      - name: Check
        run: cargo check --locked --all-features

  todos:
    name: TODO and FIXME Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: ./scripts/lint_string.sh "TODO "
      - run: ./scripts/lint_string.sh "TODO:"
      - run: ./scripts/lint_string.sh "FIXME "
      - run: ./scripts/lint_string.sh "FIXME:"
      - run: ./scripts/lint_string.sh "todo "
      - run: ./scripts/lint_string.sh "todo:"
      - run: ./scripts/lint_string.sh "fixme "
      - run: ./scripts/lint_string.sh "fixme:"
      - run: ./scripts/lint_string.sh "dbg!"

  fmt:
    name: Rust-fmt (Cargo Format)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ inputs.rust-version }}
      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
      - run: rustup component add rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    name: Clippy (Cargo Clippy Lint Check)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust Toolchain
        run: rustup toolchain install ${{ inputs.rust-version }}

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true

      - name: Install Clippy
        run: rustup component add clippy

      - name: Run Clippy
        run: cargo clippy -- -D warnings